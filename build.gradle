buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

repositories {
    maven {
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    flatDir { dirs 'deps' }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = 'com.refinedmods'
archivesBaseName = 'refinedpipes'
version = '0.5.1'

if (System.getenv('GITHUB_SHA') != null) {
    version += '+' + System.getenv('GITHUB_SHA').substring(0, 7)
}

if (System.getenv('RELEASE') != null) {
    version = System.getenv('RELEASE').substring(1) // remove 'v'
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: 'snapshot', version: '20200723-1.16.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }

        intellijClient {
            parent runs.client
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'refinedpipes', '--all', '--output', file('src/generated/resources/')
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    inputs.property 'version', project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.40'

    runtimeOnly fg.deobf("mezz.jei:jei-1.16.3:7.3.2.36")
    runtimeOnly fg.deobf("not_used:Mekanism-1.16.4:10.0.17.444")
    runtimeOnly fg.deobf("com.github.mcjty:mcjtylib:1.16-5.0.13")
    runtimeOnly fg.deobf("com.github.mcjty:rftoolsbase:1.16-2.0.6")
    runtimeOnly fg.deobf("com.github.mcjty:rftoolspower:1.16-3.0.8")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "refinedpipes",
                "Specification-Vendor"    : "refinedmods",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "refinedmods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

if (System.getenv("CURSEFORGE_TOKEN") != null) {
    curseforge {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        project {
            id = '370696'
            changelog = System.getenv("CHANGELOG")
            changelogType = 'markdown'
            releaseType = project.version.toString().contains('beta') ? 'beta' : (project.version.toString().contains('alpha') ? 'alpha' : 'release')

            mainArtifact(jar) {
                displayName = "v$project.version"
            }
        }
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/refinedmods/refinedpipes")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deobfJar(type:Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}

