buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

repositories {
    maven {
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    flatDir { dirs 'deps' }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.5.1'
def env = System.getenv()
if (env.BUILD_NUMBER) {
    version = version + "+" + "${env.BUILD_NUMBER}"
}
group = 'com.refinedmods'
archivesBaseName = 'refinedpipes'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

compileJava.options.encoding = 'UTF-8'

minecraft {
    mappings channel: 'snapshot', version: '20200723-1.16.1'

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }

        intellijClient {
            parent runs.client
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'refinedpipes', '--all', '--output', file('src/generated/resources/')
            mods {
                refinedpipes {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    inputs.property 'version', project.version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.3-34.1.0'

    runtimeOnly fg.deobf("mezz.jei:jei-1.16.3:7.3.2.36")
    runtimeOnly fg.deobf("not_used:Mekanism-1.16.4:10.0.17.444")
    runtimeOnly fg.deobf("com.github.mcjty:mcjtylib:1.16-5.0.13")
    runtimeOnly fg.deobf("com.github.mcjty:rftoolsbase:1.16-2.0.6")
    runtimeOnly fg.deobf("com.github.mcjty:rftoolspower:1.16-3.0.8")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "refinedpipes",
                "Specification-Vendor"    : "refinedmods",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "refinedmods",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task deobfJar(type:Jar) {
    from sourceSets.main.output
    classifier 'deobf'
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            artifact jar
            artifact sourcesJar
            artifact deobfJar
        }
    }
}

publishing {
    repositories {
        maven {
            url "/var/www/repo"
        }
    }
}
